version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  build-and-test:
    docker:
      - image: circleci/node:12.13-browsers
      - image: circleci/dynamodb
        entrypoint: ['java', '-Xmx1G', '-jar', 'DynamoDBLocal.jar', '-sharedDb']
  python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

jobs:
  build-and-test:
    executor: build-and-test
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: CYPRESS_CACHE_FOLDER=~/repo/cypress_cache yarn install --frozen-lockfile
      - run:
          name: Build the application
          command: |
            export REFERRALS_ENABLED=true
            export NEXT_PUBLIC_REFERRALS_ENABLED=true
            export NEXT_PUBLIC_API_URL=http://localhost:3000/api
            export NEXT_PUBLIC_REFERRALS_ENABLED=true
            export NEXT_PUBLIC_ENV=test
            yarn build
      - run:
          name: Run unit tests
          command: |
            export GOV_NOTIFY_API_KEY=xx
            yarn run unit-test
      - run:
          name: Run linting
          command: yarn lint
      - aws-cli/setup:
          aws-access-key-id: CYPRESS_AWS_ACCESS_KEY_ID
          aws-secret-access-key: CYPRESS_AWS_SECRET_ACCESS_KEY
          aws-region: CYPRESS_AWS_REGION
      - run:
          name: Create local DynamoDB vulnerabilities table
          command: aws dynamodb create-table --cli-input-json file://./config/tables/referrals.json --endpoint-url http://localhost:8000 > /dev/null
      - run:
          name: Run integration tests
          command: |
            export REFERRALS_ENABLED=true
            export NEXT_PUBLIC_REFERRALS_ENABLED=true
            export NEXT_PUBLIC_API_URL=http://localhost:3000/api
            export SHOW_TOPIC_EXPLORER=true
            export INH_URL=https://inh-admin-test.hackney.gov.uk
            export TABLE_NAME=referrals
            export ADDRESSES_API_URL=${ADDRESSES_API_URL}
            export ADDRESSES_API_KEY=${ADDRESSES_API_KEY}
            export AIRTABLE_API_KEY=xx
            export AIRTABLE_PROMPTS_TABLE_NAME="Conversational Prompts"
            export FSS_PUBLIC_API_URL=http://localhost:8085/fss
            export AIRTABLE_BASE_ID=baseId123
            export AIRTABLE_TABLE_NAMES="Service directory"
            export AIRTABLE_BASE_URL=http://localhost:8085
            export AIRTABLE_PROMPTS_API_KEY=xx
            export AIRTABLE_PROMPTS_BASE_ID=baseId456
            export HOTJAR_ID=12345
            export ALLOWED_GROUPS=xx
            export BASIC_ALLOWED_GROUPS=xx
            export NEXT_PUBLIC_SINGLEVIEW_URL=https://staging-singleview.hackney.gov.uk
            export GOV_NOTIFY_API_KEY=xx
            export NEXT_PUBLIC_ENV=test
            CYPRESS_CACHE_FOLDER=~/repo/cypress_cache yarn run int-test
      - store_artifacts:
          path: ~/repo/cypress/screenshots
      - store_artifacts:
          path: ~/repo/cypress/videos

  assume-role-staging:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  deploy:
    executor: aws-cli/default
    working_directory: ~/repo
    parameters:
      stage_name:
        type: string
      API_URL:
        type: string
      GTM_ID:
        type: string
      SINGLEVIEW_URL:
        type: string
      INH_URL:
        type: string
      aws-access-key-id:
        type: env_var_name
      aws-secret-access-key:
        type: env_var_name
      AWS_CERTIFICATE_ARN:
        type: string
      HOTJAR_ID:
        type: string
      URL:
        type: string
      REFERRALS_ENABLED:
        type: boolean
    steps:
      - *attach_workspace
      - checkout
      - run: sudo yarn global add serverless
      - run:
          name: deploy
          command: |
            export REFERRALS_ENABLED=<< parameters.REFERRALS_ENABLED >>
            export NEXT_PUBLIC_API_URL=<< parameters.API_URL >>
            export NEXT_PUBLIC_GTM_ID=<< parameters.GTM_ID >>
            export NEXT_PUBLIC_SINGLEVIEW_URL=<< parameters.SINGLEVIEW_URL >>
            export INH_URL=<< parameters.INH_URL >>
            export AWS_CERTIFICATE_ARN=<< parameters.AWS_CERTIFICATE_ARN >>
            export NEXT_PUBLIC_URL=<< parameters.URL >>
            export HOTJAR_ID=<< parameters.HOTJAR_ID >>
            export NEXT_PUBLIC_ENV=<< parameters.stage_name >>
            yarn
            yarn build
            yarn --production=true
            sls deploy -s << parameters.stage_name >>

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build-and-test
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy:
          name: deploy-staging
          stage_name: staging
          REFERRALS_ENABLED: true
          API_URL: ${NEXT_PUBLIC_API_URL_STAGING}
          aws-access-key-id: AWS_ACCESS_KEY_ID_STAGING
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_STAGING
          AWS_CERTIFICATE_ARN: arn:aws:acm:us-east-1:715003523189:certificate/8f7fa30c-a4e5-4775-b827-ade824a33c9a
          GTM_ID: ${NEXT_PUBLIC_GTM_ID}
          SINGLEVIEW_URL: ${NEXT_PUBLIC_SINGLEVIEW_URL_STAGING}
          INH_URL: ${INH_URL_STAGING}
          URL: ${NEXT_PUBLIC_URL_STAGING}
          HOTJAR_ID: ${HOTJAR_ID}
          filters:
            branches:
              only: master
          requires:
            - assume-role-staging
      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: master
      - deploy:
          name: deploy-production
          stage_name: production
          REFERRALS_ENABLED: false
          API_URL: ${NEXT_PUBLIC_API_URL_PRODUCTION}
          aws-access-key-id: AWS_ACCESS_KEY_ID_PRODUCTION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_PRODUCTION
          AWS_CERTIFICATE_ARN: arn:aws:acm:us-east-1:153306643385:certificate/71728a39-cd3e-4570-a440-e87f84ef9a0d
          GTM_ID: ${NEXT_PUBLIC_GTM_ID}
          SINGLEVIEW_URL: ${NEXT_PUBLIC_SINGLEVIEW_URL_PRODUCTION}
          INH_URL: ${INH_URL_PRODUCTION}
          URL: ${NEXT_PUBLIC_URL_PRODUCTION}
          HOTJAR_ID: ${HOTJAR_ID_PRODUCTION}
          requires:
            - assume-role-production
