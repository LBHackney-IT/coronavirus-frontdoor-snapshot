import geoDistance from 'lib/api/utils/geoDistance';
import geoCoordinates from 'lib/api/utils/geoCoordinates';

/**
 * Helper class for the VulnerabilitiesGrid component
 */
const VulnerabilitiesGridHelper = {
  /**
   * FInd matches between two arrays
   */
  findArrayMatches: (arr1, arr2) => {
    var ret = [];
    arr1.sort();
    arr2.sort();
    for (var i = 0; i < arr1.length; i += 1) {
      if (arr2.indexOf(arr1[i]) > -1) {
        ret.push(arr1[i]);
      }
    }
    return ret;
  },

  /**
   * .Sort the array by Matches first, but also by Distance second
   */
  sortArrayByMatches: arr => {
    return arr.sort(function(a, b) {
      // Primary sort by matches
      if (a.matches > b.matches) return -1;
      if (a.matches < b.matches) return 1;

      // Secondary sort by distance
      if (parseFloat(a.distance) > parseFloat(b.distance)) return 1;
      if (parseFloat(a.distance) < parseFloat(b.distance)) return -1;
    });
  },

  addItem: ({ obj, key, value }) => {
    return {
      ...obj,
      [key]: { name: value, data: {} }
    };
  },

  removeItem: ({ obj, key }) => {
    return Object.fromEntries(Object.entries(obj).filter(([k]) => k != key));
  },

  addDataItem: ({ obj, key, value, label, parentKey }) => {
    obj[parentKey].data[key] = {
      label,
      value
    };
    return obj;
  },

  removeDataItem: ({ obj, parentKey, key }) => {
    obj[parentKey].data = Object.fromEntries(
      Object.entries(obj[parentKey].data).filter(([k]) => k != key)
    );
    return obj;
  },

  /**
   * Calculates the resource distance from the resident's coordinates.
   * This calculation happen faster if we already have the resource coordinates,
   *
   * Coordinates are latitute and longitude.
   *
   */
  calculateResourceDistance: (resourceCoordinates, residentData) => {
    if (residentData && resourceCoordinates) {
      // we already have resource coordinates
      let lat, long;
      [lat, long] = resourceCoordinates.split(',');
      return geoDistance(residentData.lat, residentData.long, lat, long);
    }
    return 0;
  }
};

export default VulnerabilitiesGridHelper;
